local modgui = require("modgui")
local logger = modgui.getRightLoggerModule()
local commitapply = commitapply

--- Returns HEX representation of num
local function num2hex(num)
    local hexstr = '0123456789abcdef'
    local s = ''
    while num > 0 do
        local mod = math.fmod(num, 16)
        s = string.sub(hexstr, mod+1, mod+1) .. s
        num = math.floor(num / 16)
    end
    if s == '' then s = '0' end
    return s
end

local function str2hex(str)
    local hex = ''
    while #str > 0 do
        local hb = num2hex(string.byte(str, 1, 1))
        if #hb < 2 then hb = '0' .. hb end
        hex = hex .. hb
        str = string.sub(str, 2)
    end
    return hex
end

local SYSTEM_MODGUI_ = {
  objectType = {
    name = 'rpc.system.modgui.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {}
  }
}

register(SYSTEM_MODGUI_)

local SYSTEM_MODGUI_UPGRADEGUI_ = {
  objectType = {
    name = 'rpc.system.modgui.upgradegui.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      start = {
        access = "readWrite",
        type = "boolean",
      }
    }
  }
}

SYSTEM_MODGUI_UPGRADEGUI_.get = {
  start = "0"
}

SYSTEM_MODGUI_UPGRADEGUI_.set = {
  start = function(mapping, paramName, paramValue)  
	if paramValue == "1" then
        commitapply:newset("rpc.system.modgui.upgradegui." .. paramName)
    end
  end
}

register(SYSTEM_MODGUI_UPGRADEGUI_)

local SYSTEM_MODGUI_UTILITY_ = {
  objectType = {
    name = 'rpc.system.modgui.utility.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      resetgui = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  upgradegui = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  checkver = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  removeroot = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  resetcwmp = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  resetconfig = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  refreshdriver = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  transfer_bank1 = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  copy_bank = {
	    access = "readWrite",
	    type = "boolean",
	  },
	  rip_key_B = {
         access = "readOnly",
         type = "string",
      },
    }
  },
  get = {
	resetgui = "0",
	upgradegui = "0",
	checkver = "0",
	removeroot = "0",
	transfer_bank1 = "0",
	refreshdriver = "0",
	copy_bank = "0",
	resetconfig = "0",
	resetcwmp = "0",
	rip_key_B = function()
		local content = io.open("/proc/rip/0108")
		local result = content:read("*all")
		content:close()
		
		return str2hex(result:sub(1,64))
	end,
  },
  set = function(mapping, paramName, paramValue)
		  if paramValue == "1" then
		  	commitapply:newset("rpc.system.modgui.utility." .. paramName)
		  end
		end
}

register(SYSTEM_MODGUI_UTILITY_)

local SYSTEM_MODGUI_DEBUGLOG_ = {
  objectType = {
    name = 'rpc.system.modgui.debuglog.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      state = {
        access = "readOnly",
        type = "string",
        enumeration = {
          "None",
          "Requested",
          "Complete",
        },
      },
      filename = {
        access = "readOnly",
        type = "string",
        max = "256",
      },
	  start = {
		access = "readWrite",
		type = "boolean",
	  }
    }
  }
}

SYSTEM_MODGUI_DEBUGLOG_.get = {
  filename = function(mapping, param)
    local handle = io.popen('find /tmp -type f -name "DebugHelper*"')
    local filename = handle:read("*a")
    filename = string.gsub(filename, '^%s+', '')
    filename = string.gsub(filename, '%s+$', '')
    filename = string.gsub(filename, '[\n\r]+', ' ')
    handle:close()
	return filename
  end,
  state = function(mapping, param)
    local handle = io.popen('find /tmp -type f -name "DebugHelper*"')
    local filename = handle:read("*a")
    filename = string.gsub(filename, '^%s+', '')
    filename = string.gsub(filename, '%s+$', '')
    filename = string.gsub(filename, '[\n\r]+', ' ')
    handle:close()
	if filename ~= "" then
		return "Complete"
	end
    handle = io.popen('find /tmp -type d -name "DebugHelper*"')
    local filedir = handle:read("*a")
    filename = string.gsub(filename, '^%s+', '')
    filename = string.gsub(filename, '%s+$', '')
    filedir = string.gsub(filedir, '[\n\r]+', ' ')
    handle:close()
	if filedir ~= "" then
		return "Requested"
	end
	return "None"
  end,
  start = "0",
}

SYSTEM_MODGUI_DEBUGLOG_.set = {
  start = function(mapping, paramName, paramValue)  
	if paramValue == "1" then
        commitapply:newset("rpc.system.modgui.debuglog." .. paramName)
    end
  end,
}

register(SYSTEM_MODGUI_DEBUGLOG_)

local SYSTEM_MODGUI_SCRIPTREQUEST_ = {
  objectType = {
    name = 'rpc.system.modgui.executeCommand.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      state = {
        access = "readWrite",
        type = "string",
        enumeration = {
          "Idle",
		  "Clearing",
		  "Extracting",
		  "Downloading",
		  "Checking",
          "Requested",
		  "In Progress",
          "Complete",
        },
      }
    }
  }
}

local executeCommandRes = "Idle"

local content = io.open("/tmp/executeCommandRes")
if content then
    executeCommandRes = content:read("*all")
    content:close()
    os.remove("/tmp/executeCommandRes")
end

SYSTEM_MODGUI_SCRIPTREQUEST_.get = {
  state = function(mapping, param)
	return executeCommandRes
  end,
}

SYSTEM_MODGUI_SCRIPTREQUEST_.set = {
  state = function(mapping, paramName, paramValue)
	  executeCommandRes = paramValue
	  if paramValue ~="Idle" then
	      local content = io.open("/tmp/executeCommandRes", "wb")
          content:write(paramValue)
          content:close()
      else
        os.remove("/tmp/executeCommandRes")
      end
  end,
}

register(SYSTEM_MODGUI_SCRIPTREQUEST_)

local SYSTEM_MODGUI_APP_ = {
  objectType = {
    name = 'rpc.system.modgui.app.',
    access = 'readOnly',
    minEntries = 1,
    maxEntries = 1,
    parameters = {
	  install_emptyblacklist = {
                access = "readWrite",
                type = "boolean",
            },
	  refresh_blacklist = {
				access = "readWrite",
				type = "boolean"
	  },
    }
  }
}

SYSTEM_MODGUI_APP_.get = {
		install_emptyblacklist = "0",
		refresh_blacklist = "0",
}

local app_list = {
	"luci",
	"aria2",
	"transmission",
	"blacklist",
	"xupnp",
	"telstra",
	"amule",
	"specific_app",
}

for _, app in ipairs(app_list) do
	for _, action in ipairs({"install","remove","start","stop"}) do
		SYSTEM_MODGUI_APP_.objectType.parameters[action.."_"..app] = 
		{
			access = "readWrite",
			type = "boolean",
		}
		SYSTEM_MODGUI_APP_.get[action.."_"..app] = "0"
	end
end

SYSTEM_MODGUI_APP_.set = function(mapping, paramName, paramValue) 
	if paramValue == "1" then
        commitapply:newset("rpc.system.modgui.app." .. paramName)
    end
end

register(SYSTEM_MODGUI_APP_)
