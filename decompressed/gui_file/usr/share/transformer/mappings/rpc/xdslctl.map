--
--
--	 Custom Gui for Technicolor Modem: utility script and modified gui for the Technicolor Modem
--	 								   interface based on OpenWrt
--
--    Copyright (C) 2018  Christian Marangi <ansuelsmth@gmail.com>
--
--    This file is part of Custom Gui for Technicolor Modem.
--    
--    Custom Gui for Technicolor Modem is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--    
--    Custom Gui for Technicolor Modem is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--    
--    You should have received a copy of the GNU General Public License
--    along with Custom Gui for Technicolor Modem.  If not, see <http://www.gnu.org/licenses/>.
--
--

local logger = require("transformer.logger")
local log = logger.new("rpc.xdslctl", 2)
local format, concat, popen = string.format , table.concat , io.popen
local register = register;

local xdslctl_ = {
    objectType = {
        name = 'rpc.xdslctl.',
        access = 'readOnly',
        minEntries = 1,
        maxEntries = 1,
        parameters = {
          HlogUs1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs3 = {
            access = "readOnly",
            type = "string"
          },
		  HlogUs4 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs3Split2 = {
            access = "readOnly",
            type = "string"
          },
		  HlogDs4 = {
            access = "readOnly",
            type = "string"
          },
		  HlogScanBand = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs3 = {
            access = "readOnly",
            type = "string"
          },
		  BitsUs4 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs3Split2 = {
            access = "readOnly",
            type = "string"
          },
		  BitsDs4 = {
            access = "readOnly",
            type = "string"
          },
		  BitsScanBand = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs3 = {
            access = "readOnly",
            type = "string"
          },
		  QLNUs4 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs3Split2 = {
            access = "readOnly",
            type = "string"
          },
		  QLNDs4 = {
            access = "readOnly",
            type = "string"
          },
		  QLNScanBand = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs2 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs3 = {
            access = "readOnly",
            type = "string"
          },
		  SNRUs4 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs2 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs3Split1 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs3Split2 = {
            access = "readOnly",
            type = "string"
          },
		  SNRDs4 = {
            access = "readOnly",
            type = "string"
          },
		  SNRScanBand = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds1BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds2BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds3BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Ds4BandInitial = {
            access = "readOnly",
            type = "string"
          },
		  Us1BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us2BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us3BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us4BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds1BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds2BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds3BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Ds4BandFinal = {
            access = "readOnly",
            type = "string"
          },
		  Us1ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Us2ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Us3ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Us4ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds1ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds2ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds3ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  Ds4ScannedBand = {
            access = "readOnly",
            type = "int"
          },
		  UsBandNumber = {
            access = "readOnly",
            type = "string"
          },
		  DsBandNumber = {
            access = "readOnly",
            type = "string"
          },
		  DslamChipset = {
            access = "readOnly",
            type = "string"
          },
		  DslamVersion = {
            access = "readOnly",
            type = "string"
          },
		  DslamVersionRaw = {
            access = "readOnly",
            type = "string"
          },
		  DslMode = {
            access = "readOnly",
            type = "string"
          },
        }
    }
}

local cache = {}

local function xdslmode()
	local showdatacmd = ("xdslctl info --show")
	local showdata = popen(showdatacmd, 'r')
	local showline
	local dslmode=""
	for showline in showdata:lines() do
		if showline:match("Mode") then
			dslmode = showline:gsub("Mode:%s+","")
			break
		end
	end
	showdata:close()
	
	return dslmode
end

local function pbParams_find(bandtype)
	local cmd = ("xdslctl info --pbParams")
	local pbfile = popen(cmd, 'r')
	local pbstring = ""
	for pbline in pbfile:lines() do
		if pbline:match("Medley Phase %(Final%) Band Plan") then
			if ( bandtype == "Ds" ) then
				pbfile:read("*l")
			end
			pbstring = pbfile:read("*l")
			break
		elseif pbline:match("VDSL Port Details") then
			break
		end
	end
	
	pbfile:close()
	
	if ( bandtype == "Us" ) then
		local First_US_band = tonumber((pbstring:match("%([0-9]+,"):gsub("%(",""):gsub(",","")))
		local Us_band_num = select(2, pbstring:gsub("%(", ""))
		if ( Us_band_num == 3 ) and ( First_US_band > 100 ) then
			pbstring = pbstring:gsub(":",": (0,32)") --handle strange case when onu disable US0
		end 
	end
	
	return pbstring
end

local function parase_pbParams(bandtype,dtype)
	local pbstring = cache["pbLine" .. bandtype] or pbParams_find(bandtype) or ""
	pbstring = pbstring:gsub('[\n\r]+', '')
	local bandlist = {}
	local bandnumber = 0
	for band in pbstring:gmatch("%((.-)%)") do
		if dtype == "BandNumber" then
			bandnumber = bandnumber +1
		else
			bandlist[#bandlist+1] = band
		end
	end
	
	if dtype == "BandNumber" then
		return tostring(bandnumber)
	else
		cache["pbBand"..bandtype] = bandlist
		return
	end
end


if not cache["dslmode"] then
	cache["dslmode"] = xdslmode()
end

if not cache["dslmode"]:match("ADSL") then
	cache["pbLineUs"] = pbParams_find("Us")
	cache["pbLineDs"] = pbParams_find("Ds")
	parase_pbParams("Us")
	parase_pbParams("Ds")
end

local function xdslband(band_request,dtype,bandtype)
	
	local dslmode = cache["dslmode"] or xdslmode()

	local result = "0"
	local band
	
	local cachebandstring = bandtype .. band_request .. dtype
	
	if not dslmode:match("ADSL") then
		local pbBand = cache["pbBand"..bandtype][band_request]
		if dtype == "Initial" and pbBand then
			result = pbBand:match("(.-)%,")
		elseif dtype == "Final" and pbBand then
			result = pbBand:match("%,(%d*)")
		end
	else
		if band_request == 1 then
			if bandtype == "Us" then
				if dtype == "Initial" then
					result = "6"
				elseif dtype == "Final" then
					result = "31"
				end
			else
				if dtype == "Initial" then
					result = "33"
				elseif dtype == "Final" then
					result = "512"
				end
			end
		end
	end
	

	if result == "0" and dtype == "Final" then result = "-1" end
	cache[cachebandstring] = result
	return result
end

local function xdslctlget(dtype,request,band,bandtype,split)
    local data = {}
	local lineread = 0
	local line
	local scannedband = 0
	
	local bandstart, bandend
	
	if bandtype == "Us" and band == 1 then
		bandstart = 0
	elseif bandtype == "Ds" and band == 1 then
		bandstart = tonumber(cache["Us" .. 1 .. "Final"] or xdslband(1,"Final","Us"))+1
	elseif bandtype == "Us" and band == 2 then
		bandstart = tonumber(cache["Ds" .. 1 .. "Final"] or xdslband(1,"Final","Ds"))+1
		if xdslband(2,"Final","Us") == 0 then --We don't have Us2, execpt we are in no VDSL
			bandend = 512 --Max bit for ADSL2+
		end
	elseif bandtype == "Ds" and band == 2 then
		bandstart = tonumber(cache["Us" .. 2 .. "Final"] or xdslband(2,"Final","Us"))+1
	elseif bandtype == "Us" and band == 3 then
		bandstart = tonumber(cache["Ds" .. 2 .. "Final"] or xdslband(2,"Final","Ds"))+1
	elseif bandtype == "Us" and band == 4 then
		bandstart = tonumber(cache["Us" .. 3 .. "Final"] or xdslband(3,"Final","Us"))+1
	elseif bandtype == "Ds" and band == 3 then
		if tonumber(cache["Us" .. 4 .. "Final"] or xdslband(4,"Final","Us")) == -1 then --The Us4 band is not present!
			bandstart = tonumber(cache["Us" .. 3 .. "Final"] or xdslband(3,"Final","Us"))+1 --Take the Us3 to start
		else
			bandstart = tonumber(cache["Us" .. 4 .. "Final"] or xdslband(4,"Final","Us"))+1
		end
		bandend = tonumber(cache[bandtype .. band .. "Final"] or xdslband(band,"Final",bandtype))
		if bandend > 4096 then --We are on 35b mode
			if split == 1 then
				bandend = bandstart+(math.floor((8192-bandstart)/2))
			elseif split == 2 then
				bandstart = bandstart+(math.floor((8192-bandstart)/2))+1
				bandend = 8192 --Max bit for 35b
			end
		else
			if split == 2 then
				bandstart = 0
				bandend = -1
			end
		end
	elseif bandtype == "Ds" and band == 4 then
		bandstart = tonumber(cache["Ds" .. 3 .. "Final"] or xdslband(3,"Final","Ds"))+1
	end
	
	if not bandstart then
		bandstart = tonumber(cache[bandtype .. band .. "Initial"] or xdslband(band,"Initial",bandtype)) or 0
	end
	
	if not bandend then
		bandend = tonumber(cache[bandtype .. band .. "Final"] or xdslband(band,"Final",bandtype)) or -1
	end
	
	local cmd = "xdslctl info --" .. request
	
	local infofile = popen(cmd,"r")
	
	for line in infofile:lines() do
		if lineread>=(bandstart+8) and lineread<=(bandend+8) then
			if not ( dtype == "scanband" ) then
				if lineread>(bandend+8) then
					break
				end
				if dtype == "data" then
					if request == "Hlog" then
						line = line:gsub("(.*)-",""):sub(1, -4) or 0 
						if ( tonumber(line*-1) > -96 ) then 
							data[#data+1] = format("-%s,",line)
						else
							data[#data+1] = "NaN,"
						end
					elseif request == "QLN" then
						line = line:gsub("(.*)-",""):sub(1, -4) or 0
						if ( tonumber(line*-1) > -160 ) then 
							data[#data+1] = format("-%s,",line)
						else
							data[#data+1] = "NaN,"
						end
					elseif request == "SNR" then
						line = line:sub(-8):gsub("%s*",""):sub(1, -3) or 0
						if ( tonumber(line) > 0 ) then 
							data[#data+1] = format("%s,",line)
						else
							data[#data+1] = "NaN,"
						end
					elseif request == "Bits" then
						line = line:sub(-2):gsub("%s*","") or 0
						if ( tonumber(line) > 0 ) then 
							data[#data+1] = format("%s,",line)
						else
							data[#data+1] = "NaN,"
						end
					end
				elseif dtype == "scannedband" then
					scannedband=scannedband+1
				end
			end
		end
		lineread=lineread+1
	end
	infofile:close()
	
	if dtype == "data" then
		return concat(data) or ""--tostring(bandstart) .. "End: " .. tostring(bandend)
	elseif dtype == "scanband" then
		return tostring(lineread-8)
	elseif dtype == "scannedband" then
		return tostring(scannedband)
	end
end

local function xdslctlDslamInfo(itype)
	local cmd = "xdslctl info --vendor"
	local result = ""
	local chipset 

	local vendor_info = popen(cmd)
	
	for line in vendor_info:lines() do
		if line:match("ChipSet Vendor Id") then
			chipset = line:gsub(".*:%s+",""):gsub(":.*","")
			if itype == "chipset" then
				result = chipset
				break
			end
		end
		if line:match("ChipSet VersionNumber") and ( itype == "version" or itype == "version_raw" ) then
			result = line:gsub(".*:%s+","")
			if ( itype == "version_raw" ) then
				break
			end
			if result:sub(0,2) == "0x" then
				if chipset:match("BDCM") then
					result = result:gsub("(.*)x","")
					result = tonumber(result:sub(0,2),16) .. "." .. tonumber(result:sub(3,4),16)
				elseif chipset:match("IFTN") then
					result = result:gsub("(.*)x","")
					result = tonumber(result:sub(0,1),16) .. "." .. tonumber(result:sub(2,3),16) .. "." .. tonumber(result:sub(4,4),16)
				end
			end
			break
		end
	end
	vendor_info:close()
	
	return result
end

local function get(mapping, paramName, key)
	if paramName == "HlogScanBand" then
		return xdslctlget("scanband","Hlog",0,"Ds")
	elseif paramName:match("Hlog") then
		local band = tonumber(paramName:sub(7,7))
		local bandtype = paramName:sub(5,6)
		if paramName:match("Split1") then
			return xdslctlget("data","Hlog",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","Hlog",band,bandtype,2)
		end
		return xdslctlget("data","Hlog",band,bandtype)
	elseif paramName == "BitsScanBand" then
		return xdslctlget("scanband","Bits",0,"Ds")
	elseif paramName:match("Bits") then
		local band = tonumber(paramName:sub(7,7))
		local bandtype = paramName:sub(5,6)
		if paramName:match("Split1") then
			return xdslctlget("data","Bits",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","Bits",band,bandtype,2)
		end
		return xdslctlget("data","Bits",band,bandtype)
	elseif paramName == "QLNScanBand" then
		return xdslctlget("scanband","QLN",0,"Ds")
	elseif paramName:match("QLN") then
		local band = tonumber(paramName:sub(6,6))
		local bandtype = paramName:sub(4,5) 
		if paramName:match("Split1") then
			return xdslctlget("data","QLN",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","QLN",band,bandtype,2)
		end
		return xdslctlget("data","QLN",band,bandtype)
	elseif paramName == "SNRScanBand" then
		return xdslctlget("scanband","SNR",0,"Ds")
	elseif paramName:match("SNR") then
		local band = tonumber(paramName:sub(6,6))
		local bandtype = paramName:sub(4,5) 
		if paramName:match("Split1") then
			return xdslctlget("data","SNR",band,bandtype,1)
		elseif paramName:match("Split2") then
			return xdslctlget("data","SNR",band,bandtype,2)
		end
		return xdslctlget("data","SNR",band,bandtype)
	elseif paramName:match("Final") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslband(band,"Final",bandtype)
	elseif paramName:match("Initial") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslband(band,"Initial",bandtype)
	elseif paramName:match("BandNumber") then
		local bandtype = paramName:sub(1,2)
		return parase_pbParams(bandtype,"BandNumber")
	elseif paramName:match("ScannedBand") then
		local band = tonumber(paramName:sub(3,3))
		local bandtype = paramName:sub(1,2)
		return xdslctlget("scannedband","SNR",band,bandtype)
	elseif paramName == "DslamChipset" then
		return xdslctlDslamInfo("chipset")
	elseif paramName == "DslamVersion" then
		return xdslctlDslamInfo("version")
	elseif paramName == "DslamVersionRaw" then
		return xdslctlDslamInfo("version_raw")
	elseif paramName == "DslMode" then
		return xdslmode()
	end
end

xdslctl_.get = get

register(xdslctl_)